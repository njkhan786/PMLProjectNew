q()
setwd("I:/Coursera/Regression Models/Project")
source('I:/Coursera/Regression Models/Project/DoPlotWithRandomNumbers.R')
source('I:/Coursera/Regression Models/Project/DoPlotWithRandomNumbers.R')
do.plot(random.data(function (x) x)) # same as above: y = f(x) = x
do.plot(random.data(function (x) .5*x)) # y = f(x) = .5 * x
do.plot(random.data(function (x) .2*x)) # y = f(x) = .2 * x
do.plot(random.data(function (x) 2*x)) # y = f(x) = 2 * x
do.plot(random.data(function (x) .3*x, sd=.2))
do.plot(random.data(function (x) .3*x, sd=.5))
do.plot(random.data(function (x) .3*x, sd=1))
do.plot(random.data(function (x) .3*x, sd=2))
do.plot(random.data(function (x) .3*x, sd=.2), both=TRUE)
do.plot(random.data(function (x) .3*x, sd=.5), both=TRUE)
do.plot(random.data(function (x) .3*x, sd=1), both=TRUE)
?cor
data(mtcars)
str(mtcars)
mcor <- cor(mtcars, use = "complete.obs")
mcor
str(mcor)
?vioplot
if (!require('devtools')) install.packages('devtools'); require('devtools')
devtools::install_github('droglenc/FSA','droglenc')
devtools::install_github('droglenc/FSAdata','droglenc')
devtools::install_github('droglenc/NCStats','droglenc')
library(NCStats)
install.packages("vioplot")
library(vioplot)
install.packages("UsingR")
library(UsingR)
install.packages("Hmisc")
install.packages("Hmisc")
library(Hmisc)
install.packages("corrplot")
library(plyr)
library(ggplot2)
?vioplot
?corrplot
??corrplot
?corrplot
??corrplot
vioplot(x1, x2, names=c("0 Automatic", "1 Manual"),
col="gold")
x1 <- mtcars$mpg[mtcars$am==0]
x2 <- mtcars$mpg[mtcars$am==1]
vioplot(x1, x2, names=c("0 Automatic", "1 Manual"),
col="gold")
title(sub="(Fig -2) mpg vs Transmission Type") # package vioplot
Speed <- cars$speed
Distance <- cars$dist
plot(Speed, Distance, panel.first = grid(8, 8),
pch = 0, cex = 1.2, col = "blue")
plot(Speed, Distance,
panel.first = lines(stats::lowess(Speed, Distance), lty = "dashed"),
pch = 0, cex = 1.2, col = "blue")
plot(Speed, Distance,
panel.second = lines(stats::lowess(Speed, Distance), lty = "dashed"),
pch = 0, cex = 1.2, col = "blue")
help(layout)
matrix(c(1,1,0,2), 2, 2, byrow = TRUE)
nf <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1), 1, 1, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,2), 1, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,1), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,1), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,0,2), 1, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1), 1, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,1), 1, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,1), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,2), 2, 1, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,2), 1, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,1,1), 1, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,0,1), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(0,0,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,1), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(1,0,1,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
par(mar = c(0,3,1,1))
layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
layout.show(2)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
layout(matrix(c(1,2), 1, 2, byrow = TRUE))
nf<-layout(matrix(c(1,2), 1, 2, byrow = TRUE))
layout.show(nf)
nf<-layout(matrix(c(1,2,3,4,5,6,7,8), 4, 2, byrow = TRUE))
layout.show(nf)
x <- pmin(3, pmax(-3, stats::rnorm(50)))
y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(-3, 3)
yrange <- c(-3, 3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
x <- pmin(3, pmax(-3, stats::rnorm(50)))
y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(-3, 3)
yrange <- c(-3, 3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
nf
layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
## show the regions that have been allocated to each plot
layout.show(2)
## divide device into two rows and two columns
## allocate figure 1 and figure 2 as above
## respect relations between widths and heights
nf <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
## create single figure which is 5cm square
nf <- layout(matrix(1), widths = lcm(5), heights = lcm(5))
layout.show(nf)
layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
## show the regions that have been allocated to each plot
layout.show(2)
layout.show(1)
layout.show(2)
layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
nf <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE), respect = TRUE)
layout.show(nf)
## create single figure which is 5cm square
nf <- layout(matrix(1), widths = lcm(5), heights = lcm(5))
layout.show(nf)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(2,2), c(2,2), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
par(def.par)  #- reset to default
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(2,2), c(2,2), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = TRUE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = TRUE, xlim = c(0, top), space = 0, horiz = TRUE)
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
install.packages("corrplot")
library(corrplot)
m
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
x1 <- mtcars$mpg[mtcars$am==0]
x2 <- mtcars$mpg[mtcars$am==1]
vioplot(x1, x2, names=c("0 Automatic", "1 Manual"),
col="gold")
title(sub="(Fig -2) mpg vs Transmission Type") # package vioplot
par(mfrow=c(1,2),oma=(0,0,3,3))
par(mfrow=c(1,2),oma=c(0,0,3,3))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(mfrow=c(1,2),oma=c(0,0,0,0))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
# result there is a stronger stronger correlationship between mpg vs disp, hp, wt, cyl
# compare weaker positive to mpg vs am.
# Check the relation between mpg and transmission
#par(mfrow=(1,2))
x1 <- mtcars$mpg[mtcars$am==0]
x2 <- mtcars$mpg[mtcars$am==1]
vioplot(x1, x2, names=c("0 Automatic", "1 Manual"),
col="gold")
title(sub="(Fig -2) mpg vs Transmission Type") # package vioplot
par(mfrow=c(1,2),oma=c(4,4,0,0))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
# result there is a stronger stronger correlationship between mpg vs disp, hp, wt, cyl
# compare weaker positive to mpg vs am.
# Check the relation between mpg and transmission
#par(mfrow=(1,2))
x1 <- mtcars$mpg[mtcars$am==0]
x2 <- mtcars$mpg[mtcars$am==1]
vioplot(x1, x2, names=c("0 Automatic", "1 Manual"),
col="gold")
title(sub="(Fig -2) mpg vs Transmission Type") # package vioplot
par(mfrow=c(1,2),c(4,4.5,2,1),oma=c(4,4,0,0))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(mar=c(4,4.5,2,1),oma=c(4,4,0,0))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(mar=c(4,4.5,2,1),oma=c(0,0,4,4))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
# result there is a stronger stronger correlationship between mpg vs disp, hp, wt, cyl
par(mar=c(2,2,2,1),oma=c(0,0,4,4))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
# result there is a stronger stronger correlationship between mpg vs disp, hp, wt, cyl
?corrplot
x1 <- mtcars$mpg[mtcars$am==0]
x2 <- mtcars$mpg[mtcars$am==1]
vioplot(x1, x2, names=c("0 Automatic", "1 Manual"),
col="gold")
title(sub="(Fig -2) mpg vs Transmission Type") # package vioplot
par(oma=c(0,0,4,4),mar=c(2,2,2,1))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
source('I:/Coursera/Regression Models/Project/flattenCorrMatrix.R')
par(oma=c(0,0,4,4),mar=c(2,2,2,1))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(oma=c(0,0,4,4),mar=c(2,2,2,1))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(oma=c(0,0,5,4),mar=c(2,2,2,1))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(oma=c(0,0,0,0),mar=c(2,2,2,1))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
par(oma=c(0,0,0,0),mar=c(0,0,5,1))
# Check the correlinearity between mpg and the other variables.
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
box(“figure”,lty=”solid”, col=”green”)
par(oma=c(0,0,0,0),par(mar=c(0,0,4,1)))
box(“figure”,lty=”solid”, col=”green”)
GenericFigure <- function(ID, size1, size2)
{
plot(0:10, 0:10, type="n", xlab="X", ylab="Y")
text(5,5, ID, col="red", cex=size1)
box("plot", col="red")
mtext("Figure", SOUTH<-1, line=3, adj=1.0, cex=size2, col="blue")
}
# Figure 1. Default R Plot Area / Figure Area
Figure1 <- function()
{
oldpar <- par(oma=c(0,0,0,0)) # default values
GenericFigure("Plot Area", 3,2)
box("figure", col="blue")
par(oldpar)
}
source('~/.active-rstudio-document')
plot(0:10, 0:10, type="n", xlab="X", ylab="Y")
text(5,5, ID, col="red", cex=size1)
box("plot", col="red") mtext("Figure", SOUTH<-1, line=3, adj=1.0,
cex=size2, col="blue")
box("figure", col="blue")
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
box(lty=”solid”, col=”green”)
par(oma=c(0,0,0,0),mar=c(5, 4, 4, 2) + 0.1))
par(oma=c(0,0,0,0))
mar=(c(5, 4, 4, 2) + 0.1)
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45,
title ="(Fig -1) mpg vs other variables" )
box(lty=”solid”, col=”green”)
# result there is a stronger stronger correlationship between mpg vs disp, hp, wt, cyl
??corrplot
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
R
par.defaults <- par(no.readonly=TRUE); save(par.defaults, file="R.default.par.RData")
par.defaults
load("R.default.par.RData"); par(par.defaults)
mcor <- cor(mtcars, use = "complete.obs")
#rcorr(as.matrix(mtcars[,1:7]))   # compute the significance level
res<-rcorr(as.matrix(mtcars[,1:7]))
flattenCorrMatrix(res$r, res$P)
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
box(lty=”solid”, col=”green”)
par.defaults
setwd("I:/Coursera/StatisticalInference/Project")
library(datasets)
setwd("I:/Coursera/StatisticalInference/Project")
data(ToothGrowth)
summary(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
guides(fill=guide_legend(title="Supplement type"))
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
library(ggplot2)
data(ToothGrowth)
summary(ToothGrowth)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
pairs(len~.,data=ToothGrowth)
str(ToothGrowth)
cor(ToothGrowth)
tt1.ex <- t.test(len~dose,data=ToothGrowth)  # unequal assumption
TGdatafordoses_0.5_1.0 <- subset (ToothGrowth, dose %in% c(0.5, 1.0))
TGdatafordoses_0.5_2.0 <- subset (ToothGrowth, dose %in% c(0.5, 2.0))
TGdatafordoses_1.0_2.0 <- subset (ToothGrowth, dose %in% c(1.0, 2.0))
tt1.ex <- t.test(len~dose,data=TGdatafordoses_0.5_1.0)  # unequal assumption
print(tt1.ex)
tt3.ex <- t.test(len~dose,data=TGdatafordoses_1.0_2.0)  # unequal assumption
print(tt1.ex)
fit <- lm(len ~ dose + supp, data=ToothGrowth)
summary(fit)
TGdatafordoses_0.5_1.0
setwd("I:/Coursera/PMLearning/Project")
setwd("I:/Coursera/PMLearning/Project")
training<-read.csv('pml-training.csv',na.strings=c("NA","#DIV/0!",""),header=T)
testing<-read.csv('pml-testing.csv',na.strings=c("NA","#DIV/0!",""),header=T)
setwd("I:/Coursera/PMLearning/Project")
getwd()
render("index.Rmd", "all")
rmarkdown::render("index.Rmd", "all")
setwd("I:/Coursera/PMLearning/PMLWriteUp")
